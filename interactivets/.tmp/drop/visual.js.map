{"version":3,"file":"visual.js","mappings":"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","sources":["webpack://interactivetsBB3C2FD6EC3D483DB7CA402F922AA628/./src/htmlInjectionUtility.ts","webpack://interactivetsBB3C2FD6EC3D483DB7CA402F922AA628/./src/settings.ts","webpack://interactivetsBB3C2FD6EC3D483DB7CA402F922AA628/./src/visual.ts","webpack://interactivetsBB3C2FD6EC3D483DB7CA402F922AA628/../src/dataViewObject.ts","webpack://interactivetsBB3C2FD6EC3D483DB7CA402F922AA628/../src/dataViewObjects.ts","webpack://interactivetsBB3C2FD6EC3D483DB7CA402F922AA628/../src/dataViewObjectsParser.ts","webpack://interactivetsBB3C2FD6EC3D483DB7CA402F922AA628/external \"Function('return this')()\"","webpack://interactivetsBB3C2FD6EC3D483DB7CA402F922AA628/webpack/bootstrap","webpack://interactivetsBB3C2FD6EC3D483DB7CA402F922AA628/webpack/runtime/define property getters","webpack://interactivetsBB3C2FD6EC3D483DB7CA402F922AA628/webpack/runtime/hasOwnProperty shorthand","webpack://interactivetsBB3C2FD6EC3D483DB7CA402F922AA628/webpack/runtime/make namespace object","webpack://interactivetsBB3C2FD6EC3D483DB7CA402F922AA628/./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["\"use strict\";\nlet injectorCounter: number = 0;\nexport function resetInjector(): void {\n  injectorCounter = 0;\n}\n\nexport function injectorReady(): boolean {\n  return injectorCounter === 0;\n}\nexport function parseElement(el: HTMLElement, target: HTMLElement): Node[] {\n  let arr: Node[] = [];\n  if (!el || !el.hasChildNodes()) {\n    return;\n  }\n  let nodes: HTMLCollection = el.children;\n  for (let i: number = 0; i < nodes.length; i++) {\n    let tempNode: HTMLElement;\n    if (nodes.item(i).nodeName.toLowerCase() === \"script\") {\n      tempNode = createScriptNode(nodes.item(i));\n    } else {\n      tempNode = <HTMLElement>nodes.item(i).cloneNode(true);\n    }\n    target.appendChild(tempNode);\n    arr.push(tempNode);\n  }\n  return arr;\n}\n\nfunction createScriptNode(refNode: Element): HTMLElement {\n  let script: HTMLScriptElement = document.createElement(\"script\");\n  let attr: NamedNodeMap = refNode.attributes;\n  for (let i: number = 0; i < attr.length; i++) {\n    script.setAttribute(attr[i].name, attr[i].textContent);\n    if (attr[i].name.toLowerCase() === \"src\") {\n      // waiting only for src to finish loading - async opetation\n      injectorCounter++;\n      script.onload = () => {\n        injectorCounter--;\n      };\n    }\n  }\n  // tslint:disable-next-line\n  script.innerHTML = refNode.innerHTML;\n  return script;\n}\n\nexport function runHTMLWidgetRenderer(): void {\n  // rendering HTML which was created by HTMLWidgets package\n  // wait till all tje script elements are loaded\n  let intervalVar: number = window.setInterval(() => {\n    if (injectorReady()) {\n      window.clearInterval(intervalVar);\n      if (window.hasOwnProperty(\"HTMLWidgets\") && window[\"HTMLWidgets\"].staticRender) {\n        window[\"HTMLWidgets\"].staticRender();\n      }\n    }\n  }, 100);\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n\"use strict\";\n\nimport { dataViewObjectsParser } from \"powerbi-visuals-utils-dataviewutils\";\nimport DataViewObjectsParser = dataViewObjectsParser.DataViewObjectsParser;\n\n\nexport class VisualSettings extends DataViewObjectsParser {\n  public settings_variable_params: settings_variable_params = new settings_variable_params();\n}\n\nexport class settings_variable_params {\n  public conf_interval_show_bool: boolean = true;\n  public conf_interval_alpha: number = 0.2;\n  public smooth_bool: boolean = false;\n  public legend_show_bool: boolean = true;\n  public legend_max_width: number = 40;\n  public title_str: string = \"Forecast Plot\";\n  public x_lab_str: string = \"\";\n  public y_lab_str: string = \"\";\n  public plotly_slider_bool: boolean = false;\n  public conf_interval_fill_picker : string = \"lightblue\";\n}\n\n\n\n","/*\n*  Power BI Visual CLI\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\n\"use strict\";\nimport powerbi from \"powerbi-visuals-api\";\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\nimport IVisual = powerbi.extensibility.visual.IVisual;\nimport EnumerateVisualObjectInstancesOptions = powerbi.EnumerateVisualObjectInstancesOptions;\nimport VisualObjectInstance = powerbi.VisualObjectInstance;\nimport DataView = powerbi.DataView;\nimport IViewport = powerbi.IViewport;\nimport VisualObjectInstanceEnumerationObject = powerbi.VisualObjectInstanceEnumerationObject;\n\nimport { VisualSettings } from \"./settings\";\nimport { parseElement, resetInjector, runHTMLWidgetRenderer } from \"./htmlInjectionUtility\";\n\nenum VisualUpdateType {\n    Data = 2,\n    Resize = 4,\n    ViewMode = 8,\n    Style = 16,\n    ResizeEnd = 32,\n    All = 62,\n}\n\n// below is a snippet of a definition for an object which will contain the property values\n// selected by the users\n/*interface VisualSettings {\n    lineColor: string;\n}*/\n\n// to allow this scenario you should first the following JSON definition to the capabilities.json file\n// under the \"objects\" property:\n// \"settings\": {\n//     \"displayName\": \"Visual Settings\",\n//     \"description\": \"Visual Settings Tooltip\",\n//     \"properties\": {\n//         \"lineColor\": {\n//         \"displayName\": \"Line Color\",\n//         \"type\": { \"fill\": { \"solid\": { \"color\": true }}}\n//         }\n//     }\n// }\n\n// in order to improve the performance, one can update the <head> only in the initial rendering.\n// set to 'true' if you are using different packages to create the widgets\nconst updateHTMLHead: boolean = false;\nconst renderVisualUpdateType: number[] = [\n    VisualUpdateType.Resize,\n    VisualUpdateType.ResizeEnd,\n    VisualUpdateType.Resize + VisualUpdateType.ResizeEnd\n];\n\nexport class Visual implements IVisual {\n    private rootElement: HTMLElement;\n    private headNodes: Node[];\n    private bodyNodes: Node[];\n    private settings: VisualSettings;\n\n    public constructor(options: VisualConstructorOptions) {\n        if (options && options.element) {\n            this.rootElement = options.element;\n        }\n        this.headNodes = [];\n        this.bodyNodes = [];\n    }\n\n    public update(options: VisualUpdateOptions): void {\n\n        if (!options ||\n            !options.type ||\n            !options.viewport ||\n            !options.dataViews ||\n            options.dataViews.length === 0 ||\n            !options.dataViews[0]) {\n            return;\n        }\n        const dataView: DataView = options.dataViews[0];\n        this.settings = Visual.parseSettings(dataView);\n\n        let payloadBase64: string = null;\n        if (dataView.scriptResult && dataView.scriptResult.payloadBase64) {\n            payloadBase64 = dataView.scriptResult.payloadBase64;\n        }\n\n        if (renderVisualUpdateType.indexOf(options.type) === -1) {\n            if (payloadBase64) {\n                this.injectCodeFromPayload(payloadBase64);\n            }\n        } else {\n            this.onResizing(options.viewport);\n        }\n    }\n\n    public onResizing(finalViewport: IViewport): void {\n        // tslint:disable-next-line\n        /* add code to handle resizing of the view port */\n    }\n\n    private injectCodeFromPayload(payloadBase64: string): void {\n        // inject HTML from payload, created in R\n        // the code is injected to the 'head' and 'body' sections.\n        // if the visual was already rendered, the previous DOM elements are cleared\n\n        resetInjector();\n\n        if (!payloadBase64) {\n            return;\n        }\n\n        // create 'virtual' HTML, so parsing is easier\n        let el: HTMLHtmlElement = document.createElement(\"html\");\n        try {\n            // tslint:disable-next-line\n            el.innerHTML = window.atob(payloadBase64);\n        } catch (err) {\n            return;\n        }\n\n        // if 'updateHTMLHead == false', then the code updates the header data only on the 1st rendering\n        // this option allows loading and parsing of large and recurring scripts only once.\n        if (updateHTMLHead || this.headNodes.length === 0) {\n            while (this.headNodes.length > 0) {\n                let tempNode: Node = this.headNodes.pop();\n                document.head.removeChild(tempNode);\n            }\n            let headList: HTMLCollectionOf<HTMLHeadElement> = el.getElementsByTagName(\"head\");\n            if (headList && headList.length > 0) {\n                let head: HTMLHeadElement = headList[0];\n                this.headNodes = parseElement(head, document.head);\n            }\n        }\n\n        // update 'body' nodes, under the rootElement\n        while (this.bodyNodes.length > 0) {\n            let tempNode: Node = this.bodyNodes.pop();\n            this.rootElement.removeChild(tempNode);\n        }\n        let bodyList: HTMLCollectionOf<HTMLBodyElement> = el.getElementsByTagName(\"body\");\n        if (bodyList && bodyList.length > 0) {\n            let body: HTMLBodyElement = bodyList[0];\n            this.bodyNodes = parseElement(body, this.rootElement);\n        }\n\n        runHTMLWidgetRenderer();\n    }\n\n    private static parseSettings(dataView: DataView): VisualSettings {\n        return <VisualSettings>VisualSettings.parse(dataView);\n    }\n\n    /**\n     * This function gets called for each of the objects defined in the capabilities files and allows you to select which of the\n     * objects and properties you want to expose to the users in the property pane.\n     *\n     */\n    public enumerateObjectInstances(options: EnumerateVisualObjectInstancesOptions):\n        VisualObjectInstance[] | VisualObjectInstanceEnumerationObject {\n        return VisualSettings.enumerateObjectInstances(this.settings || VisualSettings.getDefault(), options);\n    }\n}\n","export function getValue(object, propertyName, defaultValue) {\r\n    if (!object) {\r\n        return defaultValue;\r\n    }\r\n    let propertyValue = object[propertyName];\r\n    if (propertyValue === undefined) {\r\n        return defaultValue;\r\n    }\r\n    return propertyValue;\r\n}\r\n/** Gets the solid color from a fill property using only a propertyName */\r\nexport function getFillColorByPropertyName(object, propertyName, defaultColor) {\r\n    let value = getValue(object, propertyName);\r\n    if (!value || !value.solid) {\r\n        return defaultColor;\r\n    }\r\n    return value.solid.color;\r\n}\r\n//# sourceMappingURL=dataViewObject.js.map","import * as DataViewObject from \"./dataViewObject\";\r\n/** Gets the value of the given object/property pair. */\r\nexport function getValue(objects, propertyId, defaultValue) {\r\n    if (!objects) {\r\n        return defaultValue;\r\n    }\r\n    return DataViewObject.getValue(objects[propertyId.objectName], propertyId.propertyName, defaultValue);\r\n}\r\n/** Gets an object from objects. */\r\nexport function getObject(objects, objectName, defaultValue) {\r\n    if (objects && objects[objectName]) {\r\n        return objects[objectName];\r\n    }\r\n    return defaultValue;\r\n}\r\n/** Gets the solid color from a fill property. */\r\nexport function getFillColor(objects, propertyId, defaultColor) {\r\n    const value = getValue(objects, propertyId);\r\n    if (!value || !value.solid) {\r\n        return defaultColor;\r\n    }\r\n    return value.solid.color;\r\n}\r\nexport function getCommonValue(objects, propertyId, defaultValue) {\r\n    const value = getValue(objects, propertyId, defaultValue);\r\n    if (value && value.solid) {\r\n        return value.solid.color;\r\n    }\r\n    if (value === undefined\r\n        || value === null\r\n        || (typeof value === \"object\" && !value.solid)) {\r\n        return defaultValue;\r\n    }\r\n    return value;\r\n}\r\n//# sourceMappingURL=dataViewObjects.js.map","import * as DataViewObjects from \"./dataViewObjects\";\r\nexport class DataViewObjectsParser {\r\n    static getDefault() {\r\n        return new this();\r\n    }\r\n    static createPropertyIdentifier(objectName, propertyName) {\r\n        return {\r\n            objectName,\r\n            propertyName\r\n        };\r\n    }\r\n    static parse(dataView) {\r\n        let dataViewObjectParser = this.getDefault(), properties;\r\n        if (!dataView || !dataView.metadata || !dataView.metadata.objects) {\r\n            return dataViewObjectParser;\r\n        }\r\n        properties = dataViewObjectParser.getProperties();\r\n        for (let objectName in properties) {\r\n            for (let propertyName in properties[objectName]) {\r\n                const defaultValue = dataViewObjectParser[objectName][propertyName];\r\n                dataViewObjectParser[objectName][propertyName] = DataViewObjects.getCommonValue(dataView.metadata.objects, properties[objectName][propertyName], defaultValue);\r\n            }\r\n        }\r\n        return dataViewObjectParser;\r\n    }\r\n    static isPropertyEnumerable(propertyName) {\r\n        return !DataViewObjectsParser.InnumerablePropertyPrefix.test(propertyName);\r\n    }\r\n    static enumerateObjectInstances(dataViewObjectParser, options) {\r\n        let dataViewProperties = dataViewObjectParser && dataViewObjectParser[options.objectName];\r\n        if (!dataViewProperties) {\r\n            return [];\r\n        }\r\n        let instance = {\r\n            objectName: options.objectName,\r\n            selector: null,\r\n            properties: {}\r\n        };\r\n        for (let key in dataViewProperties) {\r\n            if (dataViewProperties.hasOwnProperty(key)) {\r\n                instance.properties[key] = dataViewProperties[key];\r\n            }\r\n        }\r\n        return {\r\n            instances: [instance]\r\n        };\r\n    }\r\n    getProperties() {\r\n        let properties = {}, objectNames = Object.keys(this);\r\n        objectNames.forEach((objectName) => {\r\n            if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {\r\n                let propertyNames = Object.keys(this[objectName]);\r\n                properties[objectName] = {};\r\n                propertyNames.forEach((propertyName) => {\r\n                    if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {\r\n                        properties[objectName][propertyName] =\r\n                            DataViewObjectsParser.createPropertyIdentifier(objectName, propertyName);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        return properties;\r\n    }\r\n}\r\nDataViewObjectsParser.InnumerablePropertyPrefix = /^_/;\r\n//# sourceMappingURL=dataViewObjectsParser.js.map","module.exports = Function('return this')();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar interactivetsBB3C2FD6EC3D483DB7CA402F922AA628: IVisualPlugin = {\n    name: 'interactivetsBB3C2FD6EC3D483DB7CA402F922AA628',\n    displayName: 'Interactive Time-Series Plot',\n    class: 'Visual',\n    apiVersion: '3.8.0',\n    create: (options: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = globalThis.dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"interactivetsBB3C2FD6EC3D483DB7CA402F922AA628\"] = interactivetsBB3C2FD6EC3D483DB7CA402F922AA628;\n}\nexport default interactivetsBB3C2FD6EC3D483DB7CA402F922AA628;"],"names":["injectorCounter","resetInjector","parseElement","el","target","arr","hasChildNodes","nodes","children","i","length","tempNode","item","nodeName","toLowerCase","createScriptNode","cloneNode","appendChild","push","refNode","script","document","createElement","attr","attributes","setAttribute","name","textContent","onload","innerHTML","runHTMLWidgetRenderer","intervalVar","window","setInterval","clearInterval","hasOwnProperty","staticRender","VisualSettings","settings_variable_params","conf_interval_show_bool","conf_interval_alpha","smooth_bool","legend_show_bool","legend_max_width","title_str","x_lab_str","y_lab_str","plotly_slider_bool","conf_interval_fill_picker","VisualUpdateType","renderVisualUpdateType","Resize","ResizeEnd","Visual","options","element","this","rootElement","headNodes","bodyNodes","dataView","type","viewport","dataViews","settings","parseSettings","payloadBase64","scriptResult","indexOf","injectCodeFromPayload","onResizing","finalViewport","atob","err","pop","head","removeChild","headList","getElementsByTagName","bodyList","body","module","exports","Function","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","call","r","Symbol","toStringTag","value","powerbi","interactivetsBB3C2FD6EC3D483DB7CA402F922AA628","displayName","class","apiVersion","create","createModalDialog","dialogId","initialState","dialogRegistry","globalThis","custom","visuals","plugins"],"sourceRoot":""}